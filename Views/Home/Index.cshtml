@using System.Security.Claims

@model List<BisleriumPvtLtd.Models.Blog>

@{
    ViewData["Title"] = "Home Page";
}

<style>
   
    .blog-post {
        background-color: #f8f9fa; 
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .blog-title {
        font-size: 1.5rem;
        color: #007bff; 
        margin-bottom: 10px;
    }

    .blog-content {
        color: #333;
        margin-bottom: 15px;
    }

    .blog-author {
        font-style: italic;
        color: #666; 
        margin-bottom: 10px;
    }

    .btn-upvote,
    .btn-downvote {
        margin-right: 10px;
    }

    .btn-comment {
        margin-top: 10px;
    }
</style>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
</head>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <button id="addBlogButton">Add Blog</button>
        </div>
        <div class="container mt-5">
            <h2>Recent Blogs</h2>
          @foreach (var blog in Model)
                {
                   
                        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                        var hasVoted = blog.Votes.Any(v => v.UserId == userId);
                        var userVote = blog.Votes.FirstOrDefault(v => v.UserId == userId);
                    

                    <div>
                        <h2>@blog.Title</h2>
                        @if (!string.IsNullOrEmpty(blog.ImageUrl))
                        {
                            <img src="@blog.ImageUrl" alt="Blog Image" />
                        }
                                    <p>@blog.Body</p>
                        

                        @if (!hasVoted)
                        {
                            <form method="post" action="@Url.Action("Vote", "Blog", new { blogId = blog.Id, isUpvote = true })">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-success">👍 @blog.Upvotes</button>
                            </form>

                            <form method="post" action="@Url.Action("Vote", "Blog", new { blogId = blog.Id, isUpvote = false })">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger">👎 @blog.Downvotes</button>
                            </form>
                        }
                        else
                        {
                            var userIsUpvote = userVote.IsUpvote;

                            if (userIsUpvote)
                            {
                    <button type="button" class="btn btn-success" disabled style="background-color: grey">👍 @blog.Upvotes</button>
                                <form method="post" action="@Url.Action("Vote", "Blog", new { blogId = blog.Id, isUpvote = false })">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger">👎 @blog.Downvotes</button>
                                </form>
                            }
                            else
                            {
                                <form method="post" action="@Url.Action("Vote", "Blog", new { blogId = blog.Id, isUpvote = true })">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-success">👍 @blog.Upvotes</button>
                                </form>
                                <button type="button" class="btn btn-danger" disabled style="color: grey">👎 @blog.Downvotes</button>
                            }
                        }
                   </div>
                }
                </div>
               


@section scripts {
    <script>
        $(document).ready(function () {
            // Handling voting
            $('.btn-upvote, .btn-downvote').click(function () {
                var button = $(this);
                var blogId = button.data('blog-id');
                var type = button.data('vote-type');
                $.ajax({
                    url: '@Url.Action("Vote", "Blog")',
                    type: 'POST',
                    data: {
                        blogId: blogId,
                        type: type
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        if (data.upvotes !== undefined && data.downvotes !== undefined) {
                            button.closest('.blog-post').find('.btn-upvote').text(`👍 ${data.upvotes}`);
                            button.closest('.blog-post').find('.btn-downvote').text(`👎 ${data.downvotes}`);
                        }
                    },
                    error: function (error) {
                        console.error('Error voting:', error);
                    }
                });
            });

            // Handling comments
            $('.btn-comment').click(function () {
                var button = $(this);
                var blogId = button.data('blog-id');
                var textarea = button.prev('textarea');
                var commentContent = textarea.val();

                if (commentContent) {
                    $.ajax({
                        url: '@Url.Action("AddComment", "Blog")', // Update this to your AddComment action
                        type: 'POST',
                        data: {
                            blogId: blogId,
                            content: commentContent
                        },
                        success: function (data) {
                            // Refresh comment list or append new comment
                            textarea.val(''); // Clear textarea after posting
                        },
                        error: function (error) {
                            console.error('Error adding comment:', error);
                        }
                    });
                } else {
                    alert('Comment cannot be empty.');
                }
            });
        });

        var addBlogButton = document.getElementById('addBlogButton');
        addBlogButton.addEventListener('click', function () {
            window.location.href = '@Url.Action("AddBlog", "Blog")';
        });

        
   </script>
}

